GBA Memory:
GBAMemoryReset-->memory(WRAM/IWRAM) allocate-->anonymousMemoryMap-->VirtualAlloc/mmap

struct ARMCore* cpu
struct GBA* gba = (struct GBA*) cpu->master;
struct GBAMemory* memory = &gba->memory;

struct ARMCore {
    ...
    struct ARMMemory memory;
    ...
    struct ARMComponent* master;
    ...
};

struct GBA {
	struct ARMComponent d;

    struct ARMCore* cpu;
	struct GBAMemory memory;
    ...
};

struct ARMComponent {
	uint32_t id;
	void (*init)(struct ARMCore* cpu, struct ARMComponent* component);
	void (*deinit)(struct ARMComponent* component);
};




GBA setup(gdb-thread.c:_GBAThreadRun):
static THREAD_ENTRY _GBAThreadRun(void* context) {
	...
	struct GBA gba;
	struct ARMCore cpu;
	struct Patch patch;
	struct GBAThread* threadContext = context;
	struct ARMComponent* components[1] = {};
	int numComponents = 0;
	...
	**GBACreate(&gba);**
	**ARMSetComponents(&cpu, &gba.d, numComponents, components);**
	**ARMInit(&cpu);**
	...
	**ARMReset(&cpu);**
	...
	_changeState(threadContext, THREAD_RUNNING, true);
	**ARMRunLoop(&cpu);**
	...
	threadContext->gba = 0;
	**ARMDeinit(&cpu);**
	**GBADestroy(&gba);**

}

void GBACreate(struct GBA* gba) {
	gba->d.id = GBA_COMPONENT_MAGIC;
	gba->d.init = GBAInit;
	gba->d.deinit = 0;
}

void ARMSetComponents(struct ARMCore* cpu, struct ARMComponent* master, int extra, struct ARMComponent** extras) {
	cpu->master = master;
	cpu->numComponents = extra;
	cpu->components = extras;
}

void ARMInit(struct ARMCore* cpu) {
	cpu->master->init(cpu, cpu->master);
	int i;
	for (i = 0; i < cpu->numComponents; ++i) {
		cpu->components[i]->init(cpu, cpu->components[i]);
	}
}

//初始化GBA中断句柄、存储、音频、视频、IO等
static void GBAInit(struct ARMCore* cpu, struct ARMComponent* component) {
    ....
    GBAInterruptHandlerInit(&cpu->irqh);
	GBAMemoryInit(gba);
	GBASavedataInit(&gba->memory.savedata, 0);

	gba->video.p = gba;
	GBAVideoInit(&gba->video);

	gba->audio.p = gba;
	GBAAudioInit(&gba->audio, GBA_AUDIO_SAMPLES);

	GBAIOInit(gba);

	gba->sio.p = gba;
	GBASIOInit(&gba->sio);
    ...
}

文件结构.txt:180	ARMReset(&cpu);
文件结构.txt:310	ARMRunLoop(&cpu);

void ARMDeinit(struct ARMCore* cpu) {
	if (cpu->master->deinit) {
		cpu->master->deinit(cpu->master);
	}
	int i;
	for (i = 0; i < cpu->numComponents; ++i) {
		if (cpu->components[i]->deinit) {
			cpu->components[i]->deinit(cpu->components[i]);
		}
	}
}

void GBADestroy(struct GBA* gba) {
	if (gba->pristineRom == gba->memory.rom) {
		gba->memory.rom = 0;
	}
	if (gba->romVf) {
		gba->romVf->unmap(gba->romVf, gba->pristineRom, gba->pristineRomSize);
	}

	if (gba->biosVf) {
		gba->biosVf->unmap(gba->biosVf, gba->memory.bios, SIZE_BIOS);
	}

	GBAMemoryDeinit(gba);
	GBAVideoDeinit(&gba->video);
	GBAAudioDeinit(&gba->audio);
	GBARRContextDestroy(gba);
}


GBA rerecording: gba-rr




GBA游戏卡带：GBA Game Pak

External Memory (Game Pak)	GBA卡带内存映射
  08000000-09FFFFFF   Game Pak ROM/FlashROM (max 32MB) - Wait State 0
  0A000000-0BFFFFFF   Game Pak ROM/FlashROM (max 32MB) - Wait State 1
  0C000000-0DFFFFFF   Game Pak ROM/FlashROM (max 32MB) - Wait State 2
  0E000000-0E00FFFF   Game Pak SRAM    (max 64 KBytes) - 8bit Bus width
  0E010000-0FFFFFFF   Not used

Game Pak Bus - 32pin cartridge slot(32引脚的卡带插槽)
The cartridge bus may be used for both CGB and GBA game paks. In GBA mode, it is used as follows:
 Pin    Name    Dir  Expl.
 1      VDD     O    Power Supply 3.3V DC
 2      PHI     O    System Clock (selectable none, 4.19MHz, 8.38MHz, 16.78MHz)
 3      /WR     O    Write Select    ;\latched address to be incremented on
 4      /RD     O    Read Select     ;/rising edges of /RD or /WR signals
 5      /CS     O    ROM Chip Select ;-A0..A15 to be latched on falling edge
 6-21   AD0-15  I/O  lower 16bit Address    and/or  16bit ROM-data (see below)
 22-29  A16-23  I/O  upper 8bit ROM-Address   or    8bit SRAM-data (see below)
 30     /CS2    O    SRAM Chip Select
 31     /REQ    I    Interrupt request (/IREQ) or DMA request (/DREQ)
 32     GND     O    Ground 0V

When accessing game pak SRAM, a 16bit address is output through AD0-AD15, then 8bit of data are transferred through A16-A23.
When accessing game pak ROM, a 24bit address is output through AD0-AD15 and A16-A23, then 16bit of data are transferred through AD0-AD15.
The 24bit address is formed from the actual 25bit memory address (byte-steps), divided by two (halfword-steps).